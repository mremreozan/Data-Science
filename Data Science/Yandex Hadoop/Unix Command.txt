ls -l    ->  to use a long listing format
ls -lh   ->  add size to details 
ls -lSh  ->  to be sorted by size
pwd      ->  prints the wholw pathname of the current directory
du       ->  estimates and displays the disk space used by files
du -h    ->  to print file sizes in human readable format
df -h    ->  to report the amount of available disk space bein used in human format
mkdir    ->  to create directories
cp -r    ->  to make a copy of the directory not only a file
mv       ->  to move and rename files    
rm       ->  to remove files
rm -r    ->  to remove directories
touch    ->  to change file timestamp, to create an empty file   /  $ touch new_file.txt

head     ->  to prints the first part of files or we determine as head -4 -> prints first 4 lines / default=10
tail     ->  to print the last part of files
more     ->  as different from cat, print whole file in one screen
wc       ->  gives us count of lines, words, character (short for "word count")
		grep 2017-07 seasonal/spring.csv | wc -l
			Count how many records in seasonal/spring.csv have dates in July 2017 (2017-07).
grep     ->  grep 'data' temporary_logs.txt   ->   print all the lines from file “temporary_logs.txt”, that contains ‘data’ substring
tr       ->  cat file.txt | tr "A" "B"   ->  replace A with B in the file.txt
sort     ->  sort file.txt -r  -> sorting lines of file.txt in the reverse order
cut -d ' ' -f5 input.txt > output.txt    -> How to take the first 5 columns of a file and write them into another file?
emre is coming > output.txt  -> write into output.txt

NETWORK
free     ->  displays the total amounts of free and used memory
top 	 ->  provides a dynamic real-time view of a running system
ps       ->  provides snapshot of the status of currently  / $ ps au
kill     ->  to end the process / kill -9 [pidNumber]


HADOOP
hdfs fs -put <source> <destination>  -> to move files
hdfs fs -setrep -w 2 file.txt   -> to replicate 2 file.txt
hdfs fsck /data/wiki -files -blocks -locations   ->  to prvide you with the information about file blocks and the allocation
hdfs fsck -blockId blk_1073808569   -> to get information about file from block id



MORE COMMANDS FOR SHELL
-----------------------
less seasonal/spring.csv seasonal/summer.csv  --> If you give less the names of several files, you can type :n (colon and a lower-case
						    'n') to move to the next file, :p to go back to the previous one, or :q to quit.

cut -f 2-5,8 -d , values.csv  --> You can select columns from a file "columns 2 through 5 and columns 8, using comma as the separator"
cut -d, -f1 seasonal/spring.csv   -->  select the first column from the file spring.csv? 

grep can search for patterns as well; What's more important right now is some of grep's more common flags:
	-c: print a count of matching lines rather than the lines themselves
	-h: do not print the names of files when searching multiple files
	-i: ignore case (e.g., treat "Regression" and "regression" as matches)
	-l: print the names of files that contain matches, not the matches
	-n: print line numbers for matching lines
	-v: invert the match, i.e., only show lines that don't match
		$ grep molar seasonal/autumn.csv
			Print the contents of all of the lines containing the word molar in seasonal/autumn.csv
		$ grep -c  molar seasonal/autumn.csv
			Print the counts of all of the lines containing the word molar in seasonal/autumn.csv
		$ grep -v -n  molar seasonal/spring.csv
			Invert the match to find all of the lines that don't contain the word molar in seasonal/spring.csv
		$ grep -c incisor seasonal/autumn.csv seasonal/winter.csv
			Count how many lines contain the word incisor in autumn.csv and winter.csv combined. 		


head -n 5 seasonal/summer.csv  -->  it prints the first 5 lines of the summer data on the screen.
head -n 5 seasonal/summer.csv > top.csv   -->  nothing appears on the screen. head's output is put in a new file called top.csv

cut -d , -f 2 seasonal/summer.csv | grep -v "Tooth" 
	The pipe symbol tells the shell to use the output of the command on the left as the input to the command on the right.
	Use cut to select all of the tooth names from column 2 of the comma delimited file seasonal/summer.csv, 
		then pipe the result to grep, with an inverted match, to exclude the header line containing the word "Tooth".
	
cut -d , -f 2 seasonal/summer.csv | grep -v Tooth | head -n 1
	You can combine many commands.
	Extend this pipeline (in the previous exercise) with a head command to only select the very first tooth name.

cut -d , -f 1 seasonal/*.csv  -->  You can specify many files at once.

cut -d , -f 2 seasonal/winter.csv | grep -v Tooth | sort -n -r
	You can sort lines of text.
	Sort the names of the teeth in seasonal/winter.csv in descending (-r) alphabetical (-n | numerically) order. 

cut -d , -f 2 seasonal/winter.csv | grep -v Tooth | sort | uniq -c
	get the second column from seasonal/winter.csv, 
		remove the word "Tooth" from the output so that only tooth names are displayed,
			sort the output so that all occurrences of a particular tooth name are adjacent; and
				display each tooth name once along with a count of how often it occurs.

Ctrl + C   -->  You can stop a running program.

echo $OSTYPE  -->  The variable OSTYPE holds the name of the kind of operating system you are using.

for filetype in gif jpg png; do echo $filetype; done  -->  OUTPUT: gif, jpg, png
	The structure is for ...variable... in ...list... ; do ...body... ; done.

mv 'July 2017.csv' '2017 July data.csv'  -->  if there is a space inside the name of file, 
				you have to quote the files' names so that the shell treats each one as a single parameter

nano names.txt
	Ctrl + K: delete a line.
	Ctrl + U: un-delete a line.
	Ctrl + O: save the file ('O' stands for 'output'). You will also need to press Enter to confirm the filename!
	Ctrl + X: exit the editor.


nano dates.sh 
	cut -d , -f 1 seasonal/*.csv   -->   save and exit.
		bash dates.sh          -->   you can run the file dates.sh.